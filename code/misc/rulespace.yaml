
rule makeGO:
  input:
    script='code/gobase.R'
  output: 
  

rule matchGO:
  input:
    script='code/goFish.R'
    data='data/sr/10_matched/{type}_starvation.Rds',
  output:
    'data/sr/03_goterms/{type}/{goterm}.Rds'
  params:
    goterm = lambda wildcards: str(wildcards.goterm)
  shell:
    """
    Rscript {input.script} \
      --inPath {input.data} \
      --idPath {params.goterm} \
      --outPath {output}
    """


56 apiece
bigmem5 80

mr mash rss analysis

- ETA does not give varE as parameter without prediction
  - do not have residual/genetic covariance for either BGLR method
  - confirm fit$V and fit$G residual and genetic covariances
  
- omega is genetic covariance of bglr methods
  
- average mr.mash run with hetGrid steps of 0.1 is over 40 minutes

- starvation resistance correlation coeff with top correlated traits(cafe, free.glycerol, free.glucose) found with both gblup and bayesC.

- include mlasso with top traits? yes
rule all:
    #expand('data/02_ids/ids_{wildset}_{type}_top.Rds', type=TYPE, wildset=WILDSET),
    #expand('data/20_cor/{multimethod}_{type}_{wildset}.Rds', multimethod=MULTIMETHOD, type=TYPE, wildset=WILDSET),
    #expand('data/30_summary/{multimethod}_{type}_top.Rds', multimethod=MULTIMETHOD, type=TYPE),
    #expand('data/23_paropt/bayesC_{niter}_{burnin}_{thin}_{type}_{wildset}_top.Rds', niter=NITER, burnin=BURNIN, thin=THIN, type=TYPE, wildset=SUBSET),
    #expand('data/sr/23_paropt/lasso_{nfolds}_{dfmax}_{relax}_{type}_{wildset}.Rds', nfolds=NFOLDS, dfmax=DFMAX, relax=RELAX, type=TYPE, wildset=WILDSET),
    #expand('data/sr/30_summary/lasso_{nfolds}_{dfmax}_{relax}_{type}.Rds', nfolds=NFOLDS, dfmax=DFMAX, relax=RELAX, type=TYPE),
    #expand('data/sr/30_summary/bayesC_{rsquare}_{type}.Rds', rsquare=RSQUARE, type=TYPE),
    #expand('data/top/30_summary/{final_top}_{type}.Rds', final_top=FINAL_top, type=TYPE),
    #expand('data/sr/30_summary/{all}_{type}.Rds', all=ALL, type=TYPE),
    #expand('data/sr/30_summary/lasso_{nfolds}_{dfmax}_{relax}_{type}.Rds', nfolds=NFOLDS, dfmax=DFMAX, relax=RELAX, type=TYPE),
    #expand('data/sr/30_summary/pls_{pls_method}_{type}.Rds', pls_method=PLS_METHOD, type=TYPE),
    #expand('data/sr/30_summary/bayesC_{rsquare}_{type}.Rds', rsquare=RSQUARE, type=TYPE),
    #expand('data/top/40_all/{type}/cor/all.Rds', type=TYPE),
    #expand('data/top/40_all/{type}/time/all.Rds', type=TYPE)
    #expand('data/12_multisplit/{type}_{subset}_top.Rds', type=TYPE, subset=WILDSET)
    #expand('data/23_paropt/lasso_{opt}_{type}_top.Rds', type=TYPE, opt=config["NFOLD"]) 
    #expand('data/20_cor/{method}_{type}_{trait}.Rds', type=TYPE, trait=TRAIT, method=METHOD),
    #expand('data/20_cor/{multimethod}_{type}.Rds', type=TYPE, multimethod=MULTIMETHOD)
    #expand('data/22_cov/{cov}/{multimethod}_{type}.Rds', cov=COV, type=TYPE, multimethod=MULTIMETHOD)

rule filter_cor:
  input:
    script='code/extract.R',
    data='data/sr/30_summary/{all}_{type}.Rds'
  output:
    'data/sr/31_cor/{type}/{all}.Rds'
  threads: 1
  shell:
    """
    Rscript {input.script} \
    --inPath {input.data} \
    --method cor \
    --outPath {output}
    """
rule combine_cor:
  input:
    script='code/combine.R',
    data=expand('data/sr/31_cor/{{type}}/{all}.Rds', all=ALL, type=TYPE)
  output:
    'data/sr/40_all/{type}/cor/all.Rds'
  threads: 1
  shell:
    """
    Rscript {input.script} \
    --dataList {input.data} \
    --outPath {output}
    """
rule filter_time:
  input:
    script='code/extract.R',
    data='data/sr/30_summary/{all}_{type}.Rds'
  output:
    'data/sr/32_time/{type}/{all}.Rds'
  threads: 1
  shell:
    """
    Rscript {input.script} \
    --inPath {input.data} \
    --method time \
    --outPath {output}
    """
rule combine_time:
  input:
    script='code/combine.R',
    data=expand('data/sr/32_time/{{type}}/{all}.Rds', all=ALL, type=TYPE)
  output:
    'data/sr/40_all/{type}/time/all.Rds'
  threads: 1
  shell:
    """
    Rscript {input.script} \
    --dataList {input.data} \
    --outPath {output}
    """
    

#includes gamma and lambda as mixing parameters 
#FALSE, alpha 1 is lasso, alpha 0 is ridge regression

dfmax: 10k, 6k, 3k, 1k
pmax limits number of vars able to be sreto to NOT zero - keepem

type.multinomial: "grouped" or "ungrouped"
relax: 0 or 1

3
6
9
12

nfolds must vary from 4 to 20 by 4 ie 4 8 12 16 20

parallel requires register domc for parallel processing per id

5*2*2*7*



VARBARA
include:
tol: 1e-4 default
remove sa, let varbvs calculate using ml

alpha and mu from other estimates

nr for burn sample count from front
nr: 100,150, 250, 500, 1000





rule isoadjust:
  input:
    'data/00_raw/pheno_{type}'
  output:
    'data/01_isoadjust/{type}_{multitrait}.Rds'
  params:
    trait = lambda wildcards: str(wildcards.multitrait) 
  resources:
    slurm_partition = 'compute,fm-bigmem-1,fm-bigmem-2,fm-bigmem-3',
    time_min = 1440,
    mem_mb=4000,
    nodes=1,
    cpus=1
  script:
    'code/01_isoadjust.R'
    
    
    rule bug:
  input: 
    'data/00_raw/pheno_m.csv'
  output: 
    'data/bug.Rds'
  params:
    tol=1e-04,
    alt=10^-2
  script:
    'code/bug.R'
    

  'data/bug.Rds'
rule bug:
  input: 
    'data/00_raw/pheno_m.csv'
  output: 
    'data/bug.Rds'
  params:
    tol=1e-04,
    alt=10^-2
  resources:
    slurm_partition = 'compute,fm-bigmem-1,fm-bigmem-2,fm-bigmem-3',
    time_min = 1440,
    mem_mb=4000,
    nodes=1,
    cpus=1
  script:
    'code/bug.R'




rule isolate_adjust:
  input:
    'data/00_raw/pheno_{type}'
  output:
    'data/01_isoadjust/{type}_{multitrait}.Rds'
  params:
    trait = lambda wildcards: str(wildcards.multitrait),
    
    wildcard_type="{type}",
  resources:
    slurm_partition = 'compute,fm-bigmem-1,fm-bigmem-2,fm-bigmem-3',
    time_min = 1440,
    mem_mb=4000,
    nodes=1,
    cpus=1
  script:
    'code/01_isoadjust.R' 
    
rule multimerge:
  input:
    expand('data/01_isoadjust/{{type}}_{multitrait}.Rds', multitrait=MULTITRAIT)
  output:
    'data/11_multimatch/{type}_all.Rds'
  params:
    trait = lambda wildcards: str(wildcards.multitrait) 
  resources:
    slurm_partition = 'compute,fm-bigmem-1,fm-bigmem-2,fm-bigmem-3',
    time_min = 1440,
    mem_mb=4000,
    nodes=1,
    cpus=1
  script:
    'code/11_multimatch.R'
    


rule all:
    input: expand('data/2_cor/{method}_{alpha}_{type}_{trait}.Rds', method=METHOD2, alpha=ALPHA, type=TYPE, trait=TRAIT)


rule varlasso:
  input:
  'data/1_matched/{type}_{trait}.Rds'
  output:
  'data/2_cor/lasso_{alpha}_{type}_{trait}.Rds'
  params:
  loopIter=50,
    family='gaussian',
    alpha=lambda wildcards: float(wildcards.alpha),
    nfolds=10,
    parallel=0
  resources:
  slurm_partition = 'compute,bigmem',
    time_min = 1440,
    mem_mb=12000,
    nodes=1,
    cpus=8
  script:
  'code/method/glmnet.R'




rule covariance:
  input:
    'data/11_matched/{type}_sr.top3.Rds'
  output:
    'data/22_cov/{multitrait}_{type}_sr.top3.Rds'
  script:
    'code/method/multimash.R'
    
rule multimash_cov:
  input:
    'data/11_multimatch/{type}_sr.top3.Rds'
  output:
    genPath='data/22_cov/genetic/mr.mash_{type}_sr.top3.Rds',
    resPath='data/22_cov/residual/mr.mash_{type}_sr.top3.Rds'
  params:
    tol=10^-2,
    convergence_criterion='ELBO',
    w0_threshold=0,
    compute_ELBO=1,
    verbose=1,
    hetStep=0.1,
    null_weight=0.8,
    traitCount=4
  script:
    'code/method/covmash.R'
    
    
    
    
rule parop_multibayes:
  input:
    script='code/method/multibglr.R',
    data='data/11_multimatch/{type}_sr.top3.Rds',
    ids='data/02_ids/ids_{wildset}_{type}_top3.Rds'
  output:
    'data/23_paropt/bayesC_{niter}_{burnin}_{thin}_{type}_{wildset}_top3.Rds'
  params:
    niter = lambda wildcards: int(wildcards.niter),
    burnin = lambda wildcards: int(wildcards.burnin),
    thin = lambda wildcards: int(wildcards.thin)
  threads: 1
  shell:
    """
    Rscript {input.script} \
      --input {input.data} \
      --ids {input.ids} \
      --output {output} \
      --cpus {config[cpus]} \
      --nIter {params.niter} \
      --burnIn {params.burnin} \
      --thin {params.thin} \
      --R2 {config[R2]} \
      --model SpikeSlab \
      --saveAt data/bglr/top3_multibayesC_ \
      --traitCount 4
    """

#female-male_methods----
rule fm_multigblup:
  input:
    script='code/method/multibglr-fm.R',
    dataF='data/sr/10_matched/f_{trait}.Rds',
    dataM='data/sr/10_matched/m_{trait}.Rds'
  output:
    'data/20_cor/multigblup_{type}_{trait}.Rds'
  shell:
    """
    Rscript {input.script} \
      --inputF {input.dataF} \
      --inputM {input.dataM} \
      --output {output} \
      --cpus {config[cpus]} \
      --loopIter {config[loopIter]} \
      --type {wildcards.type} \
      --nIter {config[nIter]} \
      --burnIn {config[burnIn]} \
      --thin {config[thin]} \
      --R2 {config[R2]} \
      --model RKHS \
      --saveAt data/bglr/fm-multigblup_
    """  
rule fm_multibayesC:
  input:
    script='code/method/multibglr-fm.R',
    dataF='data/sr/10_matched/f_{trait}.Rds',
    dataM='data/sr/10_matched/m_{trait}.Rds'
  output:
    'data/20_cor/multibayesC_{type}_{trait}.Rds'
  shell:
    """
    Rscript {input.script} \
      --inputF {input.dataF} \
      --inputM {input.dataM} \
      --output {output} \
      --cpus {config[cpus]} \
      --loopIter {config[loopIter]} \
      --model SpikeSlab \
      --type {wildcards.type} \
      --nIter {config[nIter]} \
      --burnIn {config[burnIn]} \
      --thin {config[thin]} \
      --R2 {config[R2]} \
      --saveAt data/bglr/fm-multibayesC_
    """  
rule fm_mrmash:
  input:
    script='code/method/mash.R',
    dataF='data/sr/10_matched/f_{trait}.Rds',
    dataM='data/sr/10_matched/m_{trait}.Rds'
  output:
    'data/20_cor/mrmash_{type}_{trait}.Rds'
  #params:
  #wildcard_type="{type}",
  shell:
    """
    Rscript {input.script} \
      --input {input.dataF} \
      --input {input.dataM} \
      --output {output} \
      --cpus {config[cpus]} \
      --loopIter {config[loopIter]} \
      --type {wildcards.type} \
      --tol {config[tol]} \
      --convergence_criterion {config[convergence_criterion]} \
      --w0_threshold {config[w0_threshold]} \
      --compute_ELBO {config[compute_ELBO]} \
      --verbose {config[verbose]}
    """  


